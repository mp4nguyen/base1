ctx= HttpContext {
  domain:
   Domain {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined,
     members: [ [Object], [Object] ],
     oldBind: [Function],
     bind: [Function] },
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  method:
   SharedMethod {
     fn: undefined,
     name: 'save',
     aliases: [],
     isStatic: true,
     accepts: [ [Object] ],
     returns: [ [Object] ],
     errors: [],
     description: undefined,
     accessType: undefined,
     notes: undefined,
     documented: true,
     http: { path: '/save', verb: 'post' },
     rest: {},
     shared: true,
     sharedClass:
      SharedClass {
        name: 'CDoctors',
        ctor: [Object],
        _methods: [Object],
        _resolvers: [Object],
        _disabledMethods: {},
        http: [Object],
        sharedCtor: [Object] },
     ctor:
      { [Function: ModelConstructor]
        setMaxListeners: [Function: bound setMaxListeners],
        getMaxListeners: [Function: bound getMaxListeners],
        emit: [Function: bound emit],
        addListener: [Function: bound addListener],
        on: [Function],
        prependListener: [Function: bound prependListener],
        once: [Function: bound once],
        prependOnceListener: [Function: bound prependOnceListener],
        removeListener: [Function: bound removeListener],
        removeAllListeners: [Function: bound removeAllListeners],
        listeners: [Function: bound listeners],
        listenerCount: [Function: bound listenerCount],
        eventNames: [Function: bound eventNames],
        super_: [Object],
        defineProperty: [Function],
        getPropertyType: [Function],
        isProtectedProperty: [Function],
        isHiddenProperty: [Function],
        mixin: [Function],
        getDataSource: [Function],
        observe: [Function],
        removeObserver: [Function],
        clearObservers: [Function],
        notifyObserversOf: [Function],
        _notifyBaseObservers: [Function],
        notifyObserversAround: [Function],
        afterInitialize: null,
        beforeValidate: null,
        afterValidate: null,
        beforeSave: null,
        afterSave: null,
        beforeCreate: null,
        afterCreate: null,
        beforeUpdate: null,
        afterUpdate: null,
        beforeDestroy: null,
        afterDestroy: null,
        validatesPresenceOf: [Function],
        validatesAbsenceOf: [Function],
        validatesLengthOf: [Function],
        validatesNumericalityOf: [Function],
        validatesInclusionOf: [Function],
        validatesExclusionOf: [Function],
        validatesFormatOf: [Function],
        validate: [Function],
        validateAsync: [Function],
        validatesUniquenessOf: [Function],
        getter: {},
        setter: {},
        definition: [Object],
        settings: [Object],
        forEachProperty: [Function],
        attachTo: [Function],
        extend: [Function],
        registerProperty: [Function],
        registry: [Object],
        setup: [Function: setupPersistedModel],
        _ACL: [Function: getACL],
        checkAccess: [Function],
        _getAccessTypeForMethod: [Function],
        getApp: [Function],
        remoteMethod: [Function],
        disableRemoteMethod: [Function],
        belongsToRemoting: [Function],
        hasOneRemoting: [Function],
        hasManyRemoting: [Function],
        scopeRemoting: [Function],
        nestRemoting: [Function],
        ValidationError: [Object],
        sharedClass: [Object],
        sharedCtor: [Object],
        beforeRemote: [Function],
        afterRemote: [Function],
        afterRemoteError: [Function],
        _runWhenAttachedToApp: [Function],
        create: [Function],
        updateOrCreate: [Function: upsert],
        upsert: [Function: upsert],
        findOrCreate: [Function: findOrCreate],
        exists: [Function: exists],
        findById: [Function: findById],
        find: [Function: find],
        findOne: [Function: findOne],
        destroyAll: [Function: destroyAll],
        remove: [Function: destroyAll],
        deleteAll: [Function: destroyAll],
        updateAll: [Function],
        update: [Function],
        destroyById: [Function: deleteById],
        removeById: [Function: deleteById],
        deleteById: [Function: deleteById],
        count: [Function],
        getIdName: [Function],
        setupRemoting: [Function],
        diff: [Function],
        changes: [Function],
        checkpoint: [Function],
        currentCheckpoint: [Function],
        replicate: [Function],
        createUpdates: [Function],
        bulkUpdate: [Function],
        getChangeModel: [Function],
        getSourceId: [Function],
        enableChangeTracking: [Function],
        _defineChangeModel: [Function],
        rectifyAllChanges: [Function],
        handleChangeError: [Function],
        rectifyChange: [Function],
        findLastChange: [Function],
        updateLastChange: [Function],
        createChangeStream: [Object],
        autoAttach: 'db',
        save: [Function],
        _mixins: [Object],
        _forDB: [Function],
        defaultScope: [Function],
        applyScope: [Function],
        applyProperties: [Function],
        lookupModel: [Function],
        getConnector: [Function],
        findByIds: [Function],
        all: [Function],
        _getSetting: [Function],
        _normalize: [Function],
        _coerce: [Function],
        scope: [Function],
        normalizeInclude: [Function: normalizeInclude],
        include: [Function],
        hasMany: [Function: hasMany],
        belongsTo: [Function],
        hasAndBelongsToMany: [Function: hasAndBelongsToMany],
        hasOne: [Function: hasOne],
        referencesMany: [Function: referencesMany],
        embedsOne: [Function: embedsOne],
        embedsMany: [Function: embedsMany],
        beginTransaction: [Function],
        Transaction: [Object],
        scopes: [Object],
        shared: true,
        app: [Object],
        _scopeMeta: {} },
     sharedCtor:
      SharedMethod {
        fn: [Object],
        name: 'sharedCtor',
        aliases: [],
        isStatic: false,
        accepts: [Object],
        returns: [Object],
        errors: [],
        description: undefined,
        accessType: undefined,
        notes: undefined,
        documented: true,
        http: [Object],
        rest: {},
        shared: true,
        sharedClass: [Object],
        ctor: [Object],
        sharedCtor: undefined,
        isSharedCtor: true,
        stringName: 'CDoctors.prototype.sharedCtor' },
     stringName: 'CDoctors.save' },
  req:
   IncomingMessage {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: false,
     domain:
      Domain {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        members: [Object],
        oldBind: [Function],
        bind: [Function] },
     _events:
      { error: [Object],
        aborted: [Object],
        data: [Object],
        end: [Object] },
     _eventsCount: 4,
     _maxListeners: undefined,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: false,
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: false,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 5910,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: false,
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: false,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 5910,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object] },
     httpVersionMajor: 1,
     httpVersionMinor: 1,
     httpVersion: '1.1',
     complete: true,
     headers:
      { host: '0.0.0.0:3000',
        connection: 'keep-alive',
        'content-length': '612303',
        accept: 'application/json, text/plain, */*',
        origin: 'http://localhost:8080',
        authorization: 'ZN7uomJxEphYEK2GOYoiRejoKG2vFT8Il21zEOdHR7w4TunWjbUxq0OxaDwfW6A6',
        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36',
        'content-type': 'multipart/form-data; boundary=----WebKitFormBoundarylMRUFNsHpbhYqP1Q',
        referer: 'http://localhost:8080/Home/DoctorDetail',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US,en;q=0.8,vi;q=0.6' },
     rawHeaders:
      [ 'Host',
        '0.0.0.0:3000',
        'Connection',
        'keep-alive',
        'Content-Length',
        '612303',
        'Accept',
        'application/json, text/plain, */*',
        'Origin',
        'http://localhost:8080',
        'Authorization',
        'ZN7uomJxEphYEK2GOYoiRejoKG2vFT8Il21zEOdHR7w4TunWjbUxq0OxaDwfW6A6',
        'User-Agent',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36',
        'Content-Type',
        'multipart/form-data; boundary=----WebKitFormBoundarylMRUFNsHpbhYqP1Q',
        'Referer',
        'http://localhost:8080/Home/DoctorDetail',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Accept-Language',
        'en-US,en;q=0.8,vi;q=0.6' ],
     trailers: {},
     rawTrailers: [],
     upgrade: false,
     url: '/save?container=doctorAvatar',
     method: 'POST',
     statusCode: null,
     statusMessage: null,
     client:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: false,
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: false,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 5910,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Object] },
     _consuming: true,
     _dumped: false,
     next: [Function: next],
     baseUrl: '/api/CDoctors',
     originalUrl: '/api/CDoctors/save?container=doctorAvatar',
     _parsedUrl:
      Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: '?container=doctorAvatar',
        query: 'container=doctorAvatar',
        pathname: '/save',
        path: '/save?container=doctorAvatar',
        href: '/save?container=doctorAvatar',
        _raw: '/save?container=doctorAvatar' },
     params: {},
     query: { container: 'doctorAvatar' },
     res:
      ServerResponse {
        domain: [Object],
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedHeader: {},
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Object],
        connection: [Object],
        _header: null,
        _headers: [Object],
        _headerNames: [Object],
        _onPendingData: [Function: updateOutgoingData],
        req: [Circular],
        locals: {},
        flush: [Function: flush],
        write: [Function],
        end: [Function],
        on: [Object],
        writeHead: [Function: writeHead],
        'wrap@before': [Function: attach],
        addListener: [Object],
        emit: [Object],
        __unwrap: [Function],
        __wrapped: true },
     body: {},
     loopbackContext: Namespace { name: 'loopback', active: null, _set: [], id: [Object] },
     'wrap@before': [Function: attach],
     addListener: { [Function: added] __original: [Function], __unwrap: [Function], __wrapped: true },
     on: { [Function: added] __original: [Function], __unwrap: [Function], __wrapped: true },
     emit:
      { [Function: emitted]
        __original: [Function: emit],
        __unwrap: [Function],
        __wrapped: true },
     __unwrap: [Function],
     __wrapped: true,
     accessToken: null,
     route: Route { path: '/save', stack: [Object], methods: [Object] },
     remotingContext: [Circular],
     read: [Function],
     removeListener: [Function: removeListener] },
  res:
   ServerResponse {
     domain:
      Domain {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        members: [Object],
        oldBind: [Function],
        bind: [Function] },
     _events: { finish: [Function: resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedHeader: {},
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: false,
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: false,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 5910,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     connection:
      TLSSocket {
        _tlsOptions: [Object],
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        _SNICallback: null,
        servername: false,
        npnProtocol: false,
        alpnProtocol: 'http/1.1',
        authorized: false,
        authorizationError: null,
        encrypted: true,
        _events: [Object],
        _eventsCount: 12,
        connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: [Object],
        _host: null,
        _readableState: [Object],
        readable: true,
        domain: null,
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        _bytesDispatched: 0,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Object],
        _server: null,
        ssl: [Object],
        _requestCert: false,
        _rejectUnauthorized: false,
        _idleTimeout: 120000,
        _idleNext: [Object],
        _idlePrev: [Object],
        _idleStart: 5910,
        parser: [Object],
        on: [Function: socketOnWrap],
        _paused: false,
        read: [Function],
        _consuming: true,
        _httpMessage: [Circular] },
     _header: null,
     _headers:
      { 'x-powered-by': 'Express',
        'access-control-allow-origin': 'http://localhost:8080',
        vary: 'Origin',
        'access-control-allow-credentials': 'true' },
     _headerNames:
      { 'x-powered-by': 'X-Powered-By',
        'access-control-allow-origin': 'Access-Control-Allow-Origin',
        vary: 'Vary',
        'access-control-allow-credentials': 'Access-Control-Allow-Credentials' },
     _onPendingData: [Function: updateOutgoingData],
     req:
      IncomingMessage {
        _readableState: [Object],
        readable: false,
        domain: [Object],
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Object],
        trailers: {},
        rawTrailers: [],
        upgrade: false,
        url: '/save?container=doctorAvatar',
        method: 'POST',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: true,
        _dumped: false,
        next: [Function: next],
        baseUrl: '/api/CDoctors',
        originalUrl: '/api/CDoctors/save?container=doctorAvatar',
        _parsedUrl: [Object],
        params: {},
        query: [Object],
        res: [Circular],
        body: {},
        loopbackContext: [Object],
        'wrap@before': [Function: attach],
        addListener: [Object],
        on: [Object],
        emit: [Object],
        __unwrap: [Function],
        __wrapped: true,
        accessToken: null,
        route: [Object],
        remotingContext: [Circular],
        read: [Function],
        removeListener: [Function: removeListener] },
     locals: {},
     flush: [Function: flush],
     write: [Function],
     end: [Function],
     on: { [Function: added] __original: [Function], __unwrap: [Function], __wrapped: true },
     writeHead: [Function: writeHead],
     'wrap@before': [Function: attach],
     addListener:
      { [Function: added]
        __original: [Function: addListener],
        __unwrap: [Function],
        __wrapped: true },
     emit:
      { [Function: emitted]
        __original: [Function: emit],
        __unwrap: [Function],
        __wrapped: true },
     __unwrap: [Function],
     __wrapped: true },
  options: { normalizeHttpPath: false, xml: false },
  args: { def: [Circular] },
  methodString: 'CDoctors.save',
  supportedTypes:
   [ 'application/json',
     'application/javascript',
     'text/javascript',
     'json',
     '*/*' ],
  result: {} }
